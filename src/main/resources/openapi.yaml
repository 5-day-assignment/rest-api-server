openapi: 3.0.0
info:
  title: User Management API
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
paths:

  /users:
    get:
      summary: List all users
      operationId: findAll
      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Add a new user
      operationId: saveNew
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '201':
          description: User created

  /users/{userId}:
    get:
      summary: Get a user by ID
      operationId: findById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update an existing user
      operationId: saveById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          description: User updated
    delete:
      summary: Delete a user
      operationId: deleteById
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted

components:
  schemas:

    User:
      type: object
      description: User details
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        givenName:
          type: string
        familyName:
          type: string
        address:
          type: string

    NewUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - description: User details for creating a new user.
          properties:
            password:
              type: string
              format: password
              description: The password (will be hashed before storage).
          required:
            - username
            - password
            - givenName
            - familyName
            - address

    UpdateUser:
      allOf:
        - $ref: '#/components/schemas/User'
        - description: Updateable details for an existing user. At least one of the fields must be provided for an update.
          properties:
            password:
              type: string
              format: password
              description: The password (will be hashed before storage).
